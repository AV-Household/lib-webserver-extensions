using System.Net.Http.Headers;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Configurations;
using DotNet.Testcontainers.Containers;
using Microsoft.AspNetCore.Mvc.Testing;

namespace AV.Household.WebServer.Testing.Driver;

/// <summary>
///     Base class for microservice tests driver
/// </summary>
/// <typeparam name="TClient">Type of web service client (typically generated by NSwag)</typeparam>
/// <typeparam name="TEntryPoint">Entry point class of web application (typically Program)</typeparam>
public abstract class MicroserviceDriver<TClient, TEntryPoint> : WebApplicationFactory<TEntryPoint>
    where TEntryPoint : class
    where TClient : class
{
    /// <summary>
    ///     Client for microservice
    /// </summary>
    protected readonly TClient Client;

    /// <summary>
    ///     Mongo database container
    /// </summary>
    protected readonly MongoDbTestcontainer Database;

    /// <summary>
    ///     Http client that sends query to microservice
    /// </summary>
    protected readonly HttpClient HttpClient;

    /// <summary>
    ///     Default constructor implementation
    /// </summary>
    /// <exception cref="InvalidOperationException">Throws if can't setup lazy objects</exception>
    protected MicroserviceDriver()
    {
        Database = Task.Run(async () =>
        {
            var configuration = DatabaseConfiguration ??
                                throw new InvalidOperationException("Database configuration is null.");
            var container = new TestcontainersBuilder<MongoDbTestcontainer>()
                .WithDatabase(configuration)
                .Build();
            await container.StartAsync();
            return container;
        }).Result;

        HttpClient = CreateClient();
        Client =  Activator.CreateInstance(typeof(TClient), HttpClient) as TClient
            ?? throw new InvalidOperationException("Can't create web service client. Check its constructor.");
    }

    /// <summary>
    ///     Returns desired MongoDb configuration
    /// </summary>
    protected abstract MongoDbTestcontainerConfiguration? DatabaseConfiguration { get; }

    /// <summary>
    ///     Set bearer token to access microservice API
    /// </summary>
    /// <param name="bearerToken"></param>
    public void SetToken(string bearerToken)
    {
        if (!string.IsNullOrEmpty(bearerToken))
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", bearerToken);
    }
}